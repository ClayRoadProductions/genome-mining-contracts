// SPDX-License-Identifier: MIT

pragma solidity ^0.8.13;

import "../contracts/EnergyStorage.sol";
import "../contracts/Controller.sol";
import "../contracts/helpers/IConverter.sol";

import "../contracts/mocks/MockedERC20.sol";

import "ds-test/Test.sol";
import "forge-std/console.sol";
import "forge-std/Vm.sol";

/**
 * @dev Tests for the ASM Genome Mining - Energy Storage contract
 */
contract EnergyStorageTestContract is DSTest, Util, IConverter {
    Staking staker_;
    StakingStorage astoStorage_;
    StakingStorage lpStorage_;
    Converter converter_;
    EnergyStorage energyStorage_;
    Controller controller_;
    MockedERC20 astoToken_;
    MockedERC20 lpToken_;

    // Cheat codes are state changing methods called from the address:
    // 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D
    Vm vm = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);

    uint256 amount = 1_234_567_890_000_000_000; // 1.23456789 ASTO
    uint256 initialBalance = 100e18;
    uint256 userBalance = 10e18;
    uint256 astoToken = 0; // tokenId

    address someone = 0xA847d497b38B9e11833EAc3ea03921B40e6d847c;
    address deployer = address(this);
    address multisig = deployer; // for the testing we use deployer as a multisig

    /** ----------------------------------
     * ! Setup
     * ----------------------------------- */

    // The state of the contract gets reset before each
    // test is run, with the `setUp()` function being called
    // each time after deployment. Think of this like a JavaScript
    // `beforeEach` block
    function setUp() public {
        setupTokens(); // mock tokens
        setupContracts(); // instantiate GM contracts
        setupWallets(); // topup balances for testing
    }

    function setupTokens() internal {
        astoToken_ = new MockedERC20(
            "ASTO Token",
            "ASTO",
            deployer,
            initialBalance
        );
        lpToken_ = new MockedERC20(
            "Uniswap LP Token",
            "LP",
            deployer,
            initialBalance
        );
    }

    function setupContracts() internal {
        controller_ = new Controller(multisig);

        staker_ = new Staking(address(controller_));
        astoStorage_ = new StakingStorage(address(controller_));
        lpStorage_ = new StakingStorage(address(controller_));
        converter_ = new Converter(address(controller_));
        energyStorage_ = new EnergyStorage(address(controller_));

        controller_.init(
            address(astoToken_),
            address(astoStorage_),
            address(lpToken_),
            address(lpStorage_),
            address(staker_),
            address(converter_),
            address(energyStorage_)
        );
    }

    function setupWallets() internal {
        vm.deal(address(this), 1000); // adds 1000 ETH to the contract balance
        astoToken_.mint(address(staker_), userBalance);
        astoToken_.mint(someone, userBalance);
    }

    /** ----------------------------------
     * ! Admin functions
     * ----------------------------------- */

    /** ----------------------------------
     * ! Busines logic
     * ----------------------------------- */
}
